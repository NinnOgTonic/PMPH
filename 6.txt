rollback_kernel_1 (32 x 32 x 1, warp j):
  v[o][i][j] = 0.5 * myVarY[i][j] * myDyy[0..2][j] `dot` myResult[o][j-1..j+1][i]
  u[o][i][j] = dtInv * myResult[o][j][i] +
    0.5 * 0.5 * myVarX[i][j] * myDxx[0..2][i] `dot` myResult[o][j][i-1..i+1] +
    v[o][i][j]
  a[i][j]    =       - 0.5 * 0.5 * myVarX[i][j] * myDxx[0][i]
  b[i][j]    = dtInv - 0.5 * 0.5 * myVarX[i][j] * myDxx[1][i]
  c[i][j]    =       - 0.5 * 0.5 * myVarX[i][j] * myDxx[2][i]

tridag_kernel_0 (1 x 128 x 1, warp j):
  yy[i][j] = - a[i][j] * c[i-1][j]

tridag_kernel_1 (1 x 128 x 1, warp j):
  yy[0][j] = 1.0 / b[0][j]
  for i = 1..N:
    yy[i][j] = 1.0 / (b[i][j] - yy[i][j] * yy[i-1][j])

tridag_kernel_2 (1 x 128 x 1, warp j):
  a[i][j]    = 1.0 / (c[i-1][j] * yy[i-1][j] - b[i][j] / a[i][j])
  b[i][j]    = -  c[i][j] * yy[i][j]
  u[o][i][j] = u[o][i][j] * yy[i][j]

tridag_kernel_3 (1 x 128 x 1, warp j):
  loop i = 1..N:
    u[o][i][j] += a[i][j] * u[o][i-1][j]
  loop i = N-1..0:
    u[o][i][j] += b[i][j] * u[o][i+1][j]

rollback_kernel_4 (128 x 1 x 1, warp i):
  a[j][i] =  =       - 0.25 * myVarY[j][i] * myDyy[0][j]
  b[j][i] =  = dtInv - 0.25 * myVarY[j][i] * myDyy[1][j]
  c[j][i] =  =       - 0.25 * myVarY[j][i] * myDyy[2][j]
  y[o][j][i] = dtInv * u[o][i][j] - v[o][i][j]

tridag_kernel_4 (128 x 1 x 1, warp i):
  yy[j][i] = -a[j][i] * c[j-1][i]

tridag_kernel_5 (128 x 1 x 1, warp i):
  yy[0][i] = 1.0 / b[0][i]
  for j = 1..N:
    yy[j][i] = 1.0 / (b[j][i] - yy[j][i] * yy[j-1][i])

tridag_kernel_6 (128 x 1 x 1, warp i):
  a[j][i] = 1.0 / (c[j-1][i] * yy[j-1][i] - b[j][i] / a[j][i])
  b[j][i] = -c[j][i] * yy[j][i]
  myResult[o][j][i] = y[o][j][i] * yy[j][i]

tridag_kernel_7 (128 x 1 x 1, warp i):
  loop j = 1..N:
    myResults[o][j][i] += a[j][i] * myResults[o][j-1][i]
  loop j = N-1..0:
    myResults[o][j][i] += b[j][i] * myResults[o][j+1][i]
